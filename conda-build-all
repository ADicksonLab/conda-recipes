#!/usr/bin/env python
from __future__ import print_function
import re
import sys
import operator
import glob
import os
import time
import shutil
import os.path
import argparse
import traceback
import tempfile
from subprocess import check_output, call, check_call, CalledProcessError
from functools import reduce
from six import string_types
from distutils.spawn import find_executable

BINSTAR_TOKEN = os.environ.pop('BINSTAR_TOKEN', None)

try:
    from conda.utils import memoized
    import conda_build.build as conda_build_build
    import conda_build.index as conda_build_index
    from conda_build.config import config as conda_build_config
    from conda.config import subdir as platform
    assert platform in ('osx-64', 'linux-32', 'linux-64', 'win-32', 'win-64')
    from conda_build.metadata import MetaData
    from conda_build.config import Config as CondaBuildConfig
    BUILD_DIRECTORY = CondaBuildConfig.short_build_prefix
    import yaml
except ImportError:
    print('This script requires conda-build', file=sys.stderr)
    print('  $ conda install conda-build', file=sys.stderr)
    exit(1)

try:
    from binstar_client.utils import get_binstar
    from binstar_client.errors import NotFound
except ImportError:
    print('This script requires anaconda-client', file=sys.stderr)
    print('  $ conda install anaconda-client')
    exit(1)


def main():
    p = argparse.ArgumentParser(
        'Build conda packages',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    p.add_argument(
        'recipe',
        action="store",
        metavar='RECIPE_PATH',
        nargs='+',
        help="path to recipe directory"
    )
    p.add_argument(
        '--check-against',
        metavar='BINSTAR_USER'
    )
    p.add_argument(
        '--dry-run',
        action='store_true',
        help=('Do not perform any builds. The exit status indicates the '
              'number of build to-be-performed'),
    )
    p.add_argument('--upload',
        help='Automatically upload to binstar under this username'
    )
    p.add_argument(
        '--no-test',
        action='store_true',
        dest='notest',
        help="do not test the package"
    )
    p.add_argument(
        '--python',
        help="Set the Python version used by conda build",
        metavar="PYTHON_VER",
        default='27,34,35',
    )
    p.add_argument(
        '--numpy',
        help="Set the NumPy version used by conda build",
        metavar="NUMPY_VER",
        default='19,110',
    )
    p.add_argument(
        '-v', '--verbose',
        help='Give more output. Option is additive, and can be used up to 3 times.',
        dest='verbose',
        action='count',
    )
    args = p.parse_args()
    if args.verbose is None:
        args.verbose = 0

    execute(args, p)


def toposort(data):
    """Topological sort.

    The expected input is a dictionary whose keys are items, and whose
    values are a set of the dependent items.

    The output is a genenerator over the items in topological order.
    """
    # http://code.activestate.com/recipes/578272-topological-sort/

    # Ignore self dependencies.
    for k, v in data.items():
        v.discard(k)
    # Find all items that don't depend on anything.
    extra_items_in_deps = reduce(
        set.union, data.values()) - set(data.keys())
    # Add empty dependences where needed
    data.update({item: set() for item in extra_items_in_deps})
    while True:
        ordered = set(item for item, dep in data.items() if not dep)
        if not ordered:
            break
        for item in ordered:
            yield item
        data = {item: (dep - ordered) for item, dep in data.items()
                if item not in ordered}
    if data:
        raise ValueError(
            "Cyclic dependencies exist among these items"
            ":\n%s" % '\n'.join(repr(x) for x in data.items()))


def sort_recipes(recipe_paths):
    metadatas = []
    name_to_path = {}
    for r in recipe_paths:
        try:
            if os.path.isdir(r):
                m = MetaData(r)
                name_to_path[m.get_value('package/name')] = r
                metadatas.append(m)
        except SystemExit:
            pass

    names = {m.get_value('package/name'): m for m in metadatas}

    graph = {}
    for m in metadatas:
        all_requirements = set(m.get_value('requirements/build', []))
        all_requirements.update(m.get_value('requirements/run', []))
        all_requirements.update(m.get_value('test/requires', []))

        our_requirements = set()
        for r in all_requirements:
            # remove any version specified in the requirements
            # (e.g. numpy >= 1.6) or something -- we just want the "numpy"
            if ' ' in r:
                r = r.split()[0]
            if r in names:
                our_requirements.add(r)

        graph[m.get_value('package/name')] = our_requirements

    order = [name_to_path[v] for v in toposort(graph)]
    return order



def upload_to_binstar(recipe_path, python, numpy, username, max_retries=5):
    filename = conda_build_output(recipe_path, python, numpy)
    if not os.path.exists(filename):
        return

    cmd = ['anaconda']
    if BINSTAR_TOKEN is not None:
        cmd.extend(['-t', BINSTAR_TOKEN])
    cmd.extend(['upload', '--no-progress', '-u', username, filename])

    err = None
    for i in range(max_retries):
        try:
            check_call(cmd)
            return
        except CalledProcessError as e:
            err = e
            err.cmd = '[not shown]'
            print("Retrying after %s seconds..." % (i+1))
            time.sleep(i+1)

    # final raise error to client
    raise err


class VersionIter(object):
    def __init__(self, pkg, metadata, versions):
        self.versions = versions
        self.metadata = metadata
        self.pkg = pkg

    def __iter__(self):
        reqs = self.metadata.get_value('requirements/build')
        reqs = [r.split(' ')[0] if ' ' in r else r for r in reqs]
        if self.pkg in reqs:
            for v in self.versions:
                yield v
        else:
            yield self.versions[0]


def required_builds(recipes, pythons, numpys, channel_urls, verbose):
    if not os.path.isdir(conda_build_config.bldpkgs_dir):
        os.makedirs(conda_build_config.bldpkgs_dir)
    conda_build_index.update_index(conda_build_config.bldpkgs_dir)
    index = conda_build_build.get_build_index(
        clear_cache=True, channel_urls=channel_urls)

    for recipe in recipes:
        m = MetaData(recipe)
        m.check_fields()

        last_base_bldpkg_path = None
        for python in VersionIter('python', m, pythons):
            for numpy in VersionIter('numpy', m, numpys):
                # globals used by conda-build to communicate python/numpy
                # setting :(
                conda_build_config.CONDA_PY = int(python.replace('.', ''))
                conda_build_config.CONDA_NPY = int(numpy.replace('.', ''))
                # need to re-parse jinja2 in light of changing config vars.
                # (esp. for skip() to work)
                m.parse_again()

                bldpkg_path = conda_build_build.bldpkg_path(m)
                base_bldpkg_path = os.path.basename(bldpkg_path)
                if os.path.isfile(bldpkg_path):
                    if verbose > 1:
                        print('Package exists locally: %s' % base_bldpkg_path)
                    continue

                if m.skip():
                    continue

                if base_bldpkg_path in index:
                    if verbose > 1:
                        print(index[base_bldpkg_path])
                        print('Package exists on anaconda.org: %s' % m.name())
                        print('  full_name: %s' % base_bldpkg_path)
                        print('  uploaded:  %s' % index[base_bldpkg_path]['platform'])
                        print('  md5:       %s' % index[base_bldpkg_path]['md5'])
                    continue


                if base_bldpkg_path != last_base_bldpkg_path:
                    yield m, python, numpy, base_bldpkg_path
                last_base_bldpkg_path = base_bldpkg_path



@memoized
def conda_build_cmd():
    ROOTDIR = os.path.dirname(sys.executable)
    if sys.platform == 'win32':
        # find conda-build associated with the current python  interpreter
        conda_build = find_executable('conda-build', path=ROOTDIR + ';' + ROOTDIR + '\Scripts')
        assert conda_build is not None
    else:
        conda_build = find_executable('conda-build', path=ROOTDIR)
        assert conda_build is not None
    return conda_build


def build_package(recipe, python, numpy, args):
    cmd = [conda_build_cmd(), '-q', '--python', python, '--numpy', numpy, '--quiet']
    if args.notest:
        cmd.append('--no-test')
    cmd.append(recipe)
    retcode = call(cmd)
    if retcode == 0 and args.upload is not None:
        upload_to_binstar(recipe, python, numpy, username=args.upload)
    sys.stdout.flush()


def execute(args, p):
    binstar_user = args.check_against
    if binstar_user:
        binstar = get_binstar()
    else:
        binstar = None

    pythons = re.split(',\s*|\s+', args.python)
    numpys = re.split(',\s*|\s+', args.numpy)

    args_recipe = reduce(operator.add, (glob.glob(e) for e in args.recipe))
    recipes = [os.path.abspath(e) for e in sort_recipes(args_recipe)]
    print('Considering recipes in the following order:')
    print(', '.join([os.path.basename(r) for r in recipes]))
    print()
    sys.stdout.flush()

    channel_urls = (binstar_user,) if binstar_user else ()
    to_build = list(required_builds(recipes, pythons, numpys, channel_urls, verbose=args.verbose))

    if len(to_build) > 0:
        print('Scheduling the following builds:')
    for m, python, numpy, base_bldpkg_path in to_build:
        print('  %s' % base_bldpkg_path)

    if args.dry_run:
        sys.exit(len(to_build))

    print()
    curdir = os.path.abspath(os.curdir)
    tempdir = tempfile.mkdtemp()
    try:
        os.chdir(tempdir)
        for m, python, numpy, base_bldpkg_path in to_build:
            build_package(m.path, python, numpy, args)
    finally:
        os.chdir(curdir)
        shutil.rmtree(tempdir)

if __name__ == '__main__':
    main()
